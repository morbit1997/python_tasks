# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ip_mask = input("Введите адрес и маску сети: ").split('/')
#ip_mask = '10.0.1.1/24'
#ip_mask = ip_mask.split('/')
ip_template = '''
Network:
{0:<8}  {1:<8}  {2:<8}  {3:<8}
{0:08b}  {1:08b}  {2:08b}  {3:08b}

Mask:
{8}
{4:<8}  {5:<8}  {6:<8}  {7:<8}
{4:08b}  {5:08b}  {6:08b}  {7:08b}
'''
ip_addr = ip_mask[0]
ip_addr = ip_addr.split('.')
maska = int(ip_mask[1])
strmask = '/' + str(maska)
binmask = "1" * maska + "0" * (32 - maska)
bin_ip_addr = '{:08b}{:08b}{:08b}{:08b}'.format(int(ip_addr[0]),int(ip_addr[1]),int(ip_addr[2]),int(ip_addr[3]))
bin_ip_netaddr = bin_ip_addr[0:maska]
#print(bin_ip_addr)
#print(bin_ip_netaddr)
bin_ip_net = bin_ip_netaddr + "0" * (32 - maska)
#print(bin_ip_net)
print(ip_template.format(int(bin_ip_net[0:8],2),int(bin_ip_net[8:16],2),int(bin_ip_net[16:24],2),int(bin_ip_net[24:32],2),int(binmask[0:8],2), int(binmask[8:16],2), int(binmask[16:24],2), int(binmask[24:32],2), strmask))